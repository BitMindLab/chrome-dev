var TicketCaptcha = TicketCaptcha || {};
(function(k) {
    function n(b, h) {
        b.complete ? h() : b.onload = b.onerror = function() {
            b.onload = b.onerror = null;
            h()
        }
    }

    function s(b, h) {
        var d = new XMLHttpRequest;
        d.open("GET", b);
        d.responseType = "blob";
        d.onreadystatechange = function() {
            if (4 == d.readyState && 200 == d.status) {
                var b = new FileReader;
                b.onload = function() {
                    h(b.result)
                };
                b.readAsDataURL(d.response)
            }
        };
        d.send()
    }

    function t(b, h) {
        s(b.src, function(d) {
            b.src = d;
            d = d.replace("data:image/jpeg;base64,", "").replace("data:image/png;base64,", "").replace("data:image/gif;base64,", "");
            h(d)
        })
    }
    k.checkOtnCaptcha = function(b, h, d, f, k) {
        4 > b.length || "0000" == b ? d({
            code: b,
            success: !1
        }) : "string" !== typeof f || 20 > f.length || $.ajax({
            url: f,
            cache: !1,
            data: {
                randCode: b,
                rand: h
            },
            type: "POST",
            timeout: k || 1E4,
            success: function(c, f, h) {
                d({
                    code: b,
                    success: "Y" === c.data || c.data && "1" === c.data.result
                })
            },
            error: function(b, f, h) {
                d({
                    code: "",
                    success: !1
                })
            }
        })
    };
    k.getCaptcha = function(b, h, d) {
        "string" === typeof b ? chrome.extension.sendMessage({
            type: "getCaptcha",
            data: b,
            options: h
        }, d) : n(b, function() {
            var f;
            f = document.createElement("canvas");
            var k = f.getContext("2d");
            try {
                f.width = b.naturalWidth, f.height = b.naturalHeight, k.drawImage(b, 0, 0)
            } catch (c) {}
            f = f.toDataURL("image/png").replace("data:image/png;base64,", "");
            chrome.extension.sendMessage({
                type: "getCaptcha",
                data: f,
                options: h
            }, d)
        })
    };
    var q = !1;
    k.doGetCaptcha = function(b, h, d, f, p, c, n) {
        void 0 === f && (f = 3);
        n || (q = !0);
        var r = $(b);
        t(r[0], function(m) {
            k.getCaptcha(m, function(a) {
                q ? (d(a), k.checkOtnCaptcha(a, h, function(a) {
                    console.log("captcha" + (a.success ? "\u6210\u529f" : "\u5931\u8d25") + ":", a.code);
                    a.success ||
                        1 >= f ? d(a.code, a.success) : setTimeout(function() {
                            r.trigger("click");
                            k.doGetCaptcha(b, h, d, --f, p, c, !0)
                        }, 200)
                }, p, c)) : console.log("onfocus stop retry")
            })
        })
    };
    k.stopCaptcha = function() {
        q = !1
    }
})(TicketCaptcha);
Object.preventExtensions(TicketCaptcha);
(function() {
    document.addEventListener("DOMContentLoaded", function() {
        var k = document.createElement("div");
        k.id = "ticket_extension_has_installed";
        k.style.display = "none";
        document.body.appendChild(k)
    })
})();
$(function() {
    function k(a, l) {
        var e = a.userName || p;
        chrome.storage.local.get([e], function(g) {
            a.result = {};
            g && g.hasOwnProperty(e) && (a.result = g[e]);
            l(a)
        })
    }

    function n(a, l) {
        var e = a.userName || p;
        chrome.storage.local.get([e], function(g) {
            var b = {},
                d = a.settings || {};
            g && g.hasOwnProperty(e) && (b = g[e]);
            for (var c in d) d.hasOwnProperty(c) && (b[c] = d[c]);
            a.result = b;
            g = {};
            g[e] = b;
            chrome.storage.local.set(g, function() {
                l(a)
            })
        })
    }

    function s(a, l) {
        var e = a.settings,
            g = {},
            d = new u(a, l),
            c;
        for (c in e) e.hasOwnProperty(c) && (g[c] = e[c]);
        g.success =
            function() {
                m = 0;
                d.success.apply(g, arguments)
            };
        g.error = function(a, e, l) {
            m++;
            m > r && (b(), m = 0);
            d.error.apply(g, arguments)
        };
        g.complete = d.complete;
        g.jsonpCallback = d.jsonpCallback;
        g.timeout = g.timeout || 15E3;
        $.ajax(g)
    }

    function t(a, l) {
        function e(b) {
            var e = +new Date,
                g = (e - d) / 2;
            b.getResponseHeader("Date") ? (c.serverTime = Date.parse(b.getResponseHeader("Date")) + g, c.diff = c.serverTime - e) : c.serverTime = e;
            a.result = c;
            l(a)
        }
        var b = a || {},
            b = b.settings || {},
            b = b.url || "http://kyfw.12306.cn/otn/resources/images/bg_navlist.png?_" + Math.random(),
            d = +new Date,
            c = {
                diff: 0,
                serverTime: d
            };
        $.ajax({
            url: b,
            cache: !1,
            data: null,
            timeout: 1E4,
            success: function(a, b, c) {
                e(c)
            },
            error: function(a, b, c) {
                e(a)
            }
        })
    }

    function q(a) {
        var b = a.settings;
        b.method = b.method || "create";
        c.sendMessage({
            type: "pageNotify",
            notifyInfo: a.settings
        }, function() {})
    }

    function b() {
        c.sendMessage({
            type: "switchcdn"
        }, function() {})
    }

    function h(a, b) {
        var e = a.settings || {};
        a.result = a.result || {};
        "string" === typeof a.result.imgdata && a.result.imgdata.length ? e.no_check ? TicketCaptcha.getCaptcha(a.result.imgdata,
            e,
            function(e) {
                a.result.code = e;
                b(a)
            }) : "string" === typeof e.check && e.check.length ? (e.check_url = e.check_url || "https://kyfw.12306.cn/otn/passcodeNew/checkRandCodeAnsyn", TicketCaptcha.getCaptcha(a.result.imgdata, e, function(c) {
            TicketCaptcha.checkOtnCaptcha(c, e.check, function(e) {
                console.log("captcha" + (e.success ? "\u6210\u529f" : "\u5931\u8d25") + ":", e.code);
                a.result.code = e.code;
                a.result.success = e.success;
                b(a)
            }, e.check_url, e.timeout)
        })) : b(a) : b(a)
    }

    function d(a, b) {
        var e = a.settings || {},
            d = function() {
                var c = new XMLHttpRequest;
                c.open(e.method, e.url);
                c.responseType = "blob";
                c.onreadystatechange = function() {
                    if (4 == c.readyState && 200 == c.status) {
                        var d = new FileReader;
                        d.onload = function() {
                            a.result = a.result || {};
                            a.result.imgdata = d.result.replace("data:image/jpeg;base64,", "").replace("data:image/png;base64,", "");
                            !0 === e.only_getcaptcha ? b(a) : h(a, b)
                        };
                        d.readAsDataURL(c.response)
                    }
                };
                c.send()
            };
        "sjrand--------" == e.check ? c.sendMessage({
            type: "deleteCookies"
        }, d) : d()
    }

    function f(a, b, c) {}
    var p = "default_user_name",
        c = {};
    chrome.extension.sendMessage({
            type: "getBackgroundInfo"
        },
        function(a) {
            window.postMessage({
                isExtInstalled: !0,
                origin: "content_script",
                version: a.extInfo.version,
                ipAble: a.ipAble
            }, location.href)
        });
    c.sendMessage = function(a, b) {
        "function" === typeof chrome.extension.sendMessage ? c.sendMessage = function(a, b) {
            chrome.extension.sendMessage(a, b)
        } : "function" === typeof chrome.extension.sendRequest && (c.sendMessage = function(a, b) {
            chrome.extension.sendRequest(a, b)
        });
        c.sendMessage(a, b)
    };
    c.postMessage = function(a) {
        a.origin = "content_script";
        window.postMessage(JSON.parse(JSON.stringify(a)),
            location.href)
    };
    var u = function(a, b) {
            this.beforeSend = function() {
                a.beforeSend.apply(this, arguments)
            };
            this.dataFilter = function() {
                a.dataFilter.apply(this, arguments)
            };
            this.error = function() {
                a.result = Array.prototype.splice.call(arguments, 0, 2);
                a.result[0] = null;
                a.callbackName = "error";
                b(a)
            };
            this.success = function() {
                a.result = Array.prototype.splice.call(arguments, 0, 2);
                a.result.push(null);
                a.callbackName = "success";
                b(a)
            };
            this.complete = function() {
                a.result = Array.prototype.splice.call(arguments, 0, 2);
                a.result[0] = null;
                a.callbackName = "complete";
                b(a)
            };
            this.jsonpCallback = function() {
                a.result = arguments;
                a.callbackName = "jsonpCallback";
                b(a)
            };
            this.xhr = function() {}
        },
        r = 3,
        m = 0;
    window.addEventListener("message", function(a) {
        var f = a.data;
        a = f.type;
        if ("content_script" !== f.origin) switch (a) {
            case "ajax":
                s(f, c.postMessage);
                break;
            case "getConfig":
                k(f, c.postMessage);
                break;
            case "setConfig":
                n(f, c.postMessage);
                break;
            case "getServerTime":
                t(f, c.postMessage);
                break;
            case "pageNotify":
                q(f);
                break;
            case "checkcode":
                h(f, c.postMessage);
                break;
            case "getCaptcha":
                d(f,
                    c.postMessage);
                break;
            case "switchcdn":
                b();
                break;
            case "sendMessage":
                c.sendMessage(f.settings, function(a) {
                    c.postMessage($.extend(f, {
                        result: a
                    }))
                });
                break;
            case "getTuipiaoOpened":
                chrome.storage.local.get("tuipiao-opened", function(a) {
                    chrome.storage.local.set({
                        "tuipiao-opened": !1
                    });
                    c.postMessage($.extend(f, {
                        result: a["tuipiao-opened"]
                    }))
                })
        }
    }, !1);
    chrome.extension.onMessage && chrome.extension.onMessage.addListener ? chrome.extension.onMessage.addListener(f) : "undefined" !== chrome.extension.onRequest && chrome.extension.onRequest.addListener &&
        chrome.extension.onRequest.addListener(f)
});